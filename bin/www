#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('qat:server');
var http = require('http');

const api = require('../models/api.js');
const bnAppsService = require('../models/bnApp').service;
const evalRoundsService = require('../models/evalRound').service;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('listening', loopWebhooks);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * App/eval deadline notifications
 */

const defaultAppPopulate = [
  { populate: 'applicant', display: 'username osuId' },
];

const defaultRoundPopulate = [
  { populate: 'bn', display: 'username osuId probation' },
];

async function loopWebhooks() {
  setInterval(async function(){
    let date = new Date();
    let nearDeadline = new Date();
    nearDeadline.setDate(nearDeadline.getDate() + 1);

    let activeApps = await bnAppsService.query(
      { active: true, test: { $exists: true } },
      defaultAppPopulate,
      {},
      true
    );

    let activeRounds = await evalRoundsService.query(
      { active: true },
      defaultRoundPopulate,
      {},
      true
    );

    let osuHighlight;
    let taikoHighlight;
    let catchHighlight;
    let maniaHighlight;
    
    activeApps.forEach(app => {
      let addition = 7;
      if(app.discussion) addition += 7;
      let deadline = new Date(app.createdAt.setDate(app.createdAt.getDate() + addition));
      if (date > deadline){
        if(!osuHighlight && app.mode == 'osu') osuHighlight = true;
        if(!taikoHighlight && app.mode == 'taiko') taikoHighlight = true;
        if(!catchHighlight && app.mode == 'catch') catchHighlight = true;
        if(!maniaHighlight && app.mode == 'mania') maniaHighlight = true;
        api.webhookPost(
          [{
            author: {
                name: `BN app eval for ${app.applicant.username} is overdue!`,
                icon_url: `https://a.ppy.sh/${app.applicant.osuId}`,
                url: `https://osu.ppy.sh/users/${app.applicant.osuId}`
            },
            color: '14427693',
          }], 
          app.mode
        );
      }else if (deadline < nearDeadline){
        api.webhookPost(
          [{
            author: {
                name: `BN app eval for ${app.applicant.username} is due in less than 24 hours!`,
                icon_url: `https://a.ppy.sh/${app.applicant.osuId}`,
                url: `https://osu.ppy.sh/users/${app.applicant.osuId}`
            },
            color: '14427693',
          }], 
          app.mode
        );
      }
    });

    activeRounds.forEach(round => {
      if (date > round.deadline){
        if(!osuHighlight && round.mode == 'osu') osuHighlight = true;
        if(!taikoHighlight && round.mode == 'taiko') taikoHighlight = true;
        if(!catchHighlight && round.mode == 'catch') catchHighlight = true;
        if(!maniaHighlight && round.mode == 'mania') maniaHighlight = true;

        api.webhookPost(
          [{
            author: {
                name: `Current BN eval for ${round.bn.username} is overdue!`,
                icon_url: `https://a.ppy.sh/${round.bn.osuId}`,
                url: `https://osu.ppy.sh/users/${round.bn.osuId}`
            },
            color: '14427693',
          }], 
          round.mode
        );
      }else if (round.deadline < nearDeadline){
        api.webhookPost(
          [{
            author: {
              name: `Current BN eval for ${round.bn.username} is due in less than 24 hours!`,
              icon_url: `https://a.ppy.sh/${round.bn.osuId}`,
              url: `https://osu.ppy.sh/users/${round.bn.osuId}`
            },
            color: '14427693',
          }], 
          round.mode
        );
      }
    });
    setTimeout(function(){
      if(osuHighlight) api.highlightWebhookPost('do shit', 'osu');
      if(taikoHighlight) api.highlightWebhookPost('I, bnsite, formally request you to do shit', 'taiko');
      if(catchHighlight) api.highlightWebhookPost('fat yoshi', 'catch');
      if(maniaHighlight) api.highlightWebhookPost('do shit', 'mania');
    }, 5000)
    
  }, 86400000);
}